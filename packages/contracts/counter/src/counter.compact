// SPDX-License-Identifier: Apache-2.0
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

pragma language_version 0.16;

import CompactStandardLibrary;

export struct CredentialSubject {
    id: Bytes<32>; // The id of the subject (midnight wallet own_public_key)
    first_name: Bytes<32>; // The first name of the subject
    last_name: Bytes<32>; // The last name of the subject
    birth_timestamp: Uint<64>; // The birth timestamp of the subject
}

// Public state
export ledger round: Counter;
export ledger credentialHashes: Map<ZswapCoinPublicKey, Bytes<32>>; // Id to hash(CredentialSubject)

witness get_identity(): CredentialSubject; // Retrieve the identity details privately
witness get_current_time(): Uint<64>; // Retrieve the current time from the system

// This is not a safe implementation because the hash is not unique and can be guessed.
export pure circuit subject_hash(birthTimestamp: Uint<64>): Bytes<32> {
  return persistentHash<Uint<64>>(birthTimestamp);
}

export circuit verify_identity(): Boolean {
  const identity = get_identity();
  // Retrieve the user's public key from the circuit context
  const userPublicKey = ownPublicKey();

  // Check if the identity is valid
  //assert(identity.id == userPublicKey.bytes, "Identity ID should be the ownPublicKey");
  assert(identity.first_name != default<Bytes<32>>, "First name cannot be empty");
  assert(identity.last_name != default<Bytes<32>>, "Last name cannot be empty");
  assert(identity.birth_timestamp > 0, "Birth timestamp must be a positive number");

  // Keep the birth date semi-private by hashing it.
  const subjectHash = subject_hash(identity.birth_timestamp);
  // Use CoinPublicKey for lookup, not disclosed value
  const exists = credentialHashes.member(userPublicKey);

  if(exists) {
    // If the identity already exists, check if the hash matches
     assert(credentialHashes.lookup(userPublicKey) == disclose(subjectHash), "Credential subject hash mismatch");
  } else {
     credentialHashes.insert(userPublicKey, disclose(subjectHash));
  }

  // Temporary solution for timestamp. Timestamps aren't inherently trusted so a better pattern needs to be applied.
  // This is a workaround to ensure the user is over 21 years old.
  const current_time = disclose(get_current_time());
  // Returns: true if the user is over 21 years old, false otherwise.
  return disclose((current_time - identity.birth_timestamp) > 21 * 365 * 24 * 60 * 60 * 1000);
}

// transition function changing public state
export circuit increment(): [] {

  if (verify_identity()) {
    // Increment the round if the identity is verified
    round.increment(1);
  } 
}

